import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.crypto.Cipher;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@SpringBootApplication
public class ServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(ServerApplication.class, args);
	}

}

@RestController
class ServerController{  
    @RequestMapping("/hash")
    public String myHash(){
    	String data = "Hello Anthony Fillmore!";
    	
    	// Step 1: Create an object of MessageDigest class with AES (protect with try/catch)
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return "Error: SHA-256 algorithm not found.";
        }
    
        // Step 2: Generate the hash value of byte type using the digest() method
        byte[] digest = md.digest(data.getBytes());

        // Step 3: Convert the hash value to hex using the bytesToHex function we wrote
        String checksum = bytesToHex(digest);

        // Step 4: Return required details to the web page
        return "<p>Data: " + data + "<br>Algorithm Cipher: SHA-256<br>Checksum Hash Value: " + checksum;
    }
    
    /* method to convert string bytes to hex - Wrote my own method here because I could't find a library
     * with a method called "bytesToHex". This seemed to be a pretty standard way to go about it according to 
     * stack overflow: https://stackoverflow.com/questions/2817752/java-code-to-convert-byte-to-hexadecimal 
     */
    private static String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
}
